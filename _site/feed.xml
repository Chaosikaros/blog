<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2020-08-28T00:56:04+08:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">Chaosikaros</title><subtitle>Blog</subtitle><entry><title type="html">CUDA开发笔记—向量运算对比</title><link href="http://localhost:4000/blog/cuda/" rel="alternate" type="text/html" title="CUDA开发笔记---向量运算对比" /><published>2020-08-27T00:00:00+08:00</published><updated>2020-08-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/cuda</id><content type="html" xml:base="http://localhost:4000/blog/cuda/">&lt;p&gt;最近开始学习CUDA。正式开始写代码前查了一些资料，对CUDA的印象就是擅长浮点数运算，缺点就是如果数据量不足够大，就不一定比CPU快。自己尝试了一些简单的对比后稍微有些理解了。&lt;/p&gt;

&lt;p&gt;电脑配置：i7-670HQ，GTX970m，16G。&lt;/p&gt;

&lt;p&gt;测试使用三个CUDA官方例子中的三维向量计算函数：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__host__&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__device__&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsqrtf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__host__&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__device__&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrtf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__host__&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__device__&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其中用到的其他函数是CUDA内置的sqrtf()和基于sqrtf()的rsqrtf()：平方根和平方根倒数&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__CUDA_MATH_CRTIMP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__DEVICE_FUNCTIONS_DECL__&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__device_builtin__&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__cdecl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrtf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__THROW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rsqrtf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrtf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输入： float3 a ：(99, 99, 99);
            float3 b ：(999, 999, 999);&lt;/p&gt;

&lt;p&gt;时间单位ms。&lt;/p&gt;

&lt;p&gt;第一次测试：使用以上三个函数计算100万次：normalize(a); length(a-b); dot(a,b).&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;normalize(a)&lt;/th&gt;
      &lt;th&gt;length(a-b)&lt;/th&gt;
      &lt;th&gt;dot(a,b)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CPU用时&lt;/td&gt;
      &lt;td&gt;132&lt;/td&gt;
      &lt;td&gt;141&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CUDA用时&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;CUDA下直接爆内存卡死。可能是我的配置扛不住连续一百万次cudaMemcpy()。&lt;/p&gt;

&lt;p&gt;第二次测试：换成100次。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;normalize(a)&lt;/th&gt;
      &lt;th&gt;length(a-b)&lt;/th&gt;
      &lt;th&gt;dot(a,b)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CPU用时&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CUDA用时&lt;/td&gt;
      &lt;td&gt;109&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;结论：差距巨大，按照第一次测试的结果估算，这种情况下CPU比CUDA快5333倍。&lt;/p&gt;

&lt;p&gt;第三次测试：把单独输入换成数组一次输入。以下是不同大小数组的结果。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;CPU nor&lt;/th&gt;
      &lt;th&gt;CUDA nor&lt;/th&gt;
      &lt;th&gt;CPU len&lt;/th&gt;
      &lt;th&gt;CUDA len&lt;/th&gt;
      &lt;th&gt;CPU dot&lt;/th&gt;
      &lt;th&gt;CUDA dot&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10000&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;100000&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1000000&lt;/td&gt;
      &lt;td&gt;139&lt;/td&gt;
      &lt;td&gt;143&lt;/td&gt;
      &lt;td&gt;146&lt;/td&gt;
      &lt;td&gt;103&lt;/td&gt;
      &lt;td&gt;34&lt;/td&gt;
      &lt;td&gt;107&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10000000&lt;/td&gt;
      &lt;td&gt;1395&lt;/td&gt;
      &lt;td&gt;1455&lt;/td&gt;
      &lt;td&gt;1460&lt;/td&gt;
      &lt;td&gt;1064&lt;/td&gt;
      &lt;td&gt;361&lt;/td&gt;
      &lt;td&gt;1056&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;100000000&lt;/td&gt;
      &lt;td&gt;14254&lt;/td&gt;
      &lt;td&gt;17737&lt;/td&gt;
      &lt;td&gt;14661&lt;/td&gt;
      &lt;td&gt;14809&lt;/td&gt;
      &lt;td&gt;3420&lt;/td&gt;
      &lt;td&gt;10722&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这次的结果就有意思了。10000长度以下差别不是很大，10万次以上CUDA的length(a-b)明显比CPU快，但其他的还是比不过CPU。一亿次时爆了内存，程序卡了，CUDA的length(a-b)优势也因为爆内存而消失了。&lt;/p&gt;

&lt;p&gt;这就说明了CUDA的好几个特点。首先是输入量大的时候，把大量变量一起传给CUDA运算会比单个传快得多，因为单个传只用了CUDA的一个线程。在数据运算量不大的时候，CUDA和CPU差距也不大，甚至CPU还全面赶超CUDA。当数据量足够大时，CUDA的length(a-b)比CPU快了差不多一半，但其他的还是慢。&lt;/p&gt;

&lt;p&gt;从函数上看，比dot的话，整数运算CUDA总是比CPU慢。 length函数中也是调用了dot，只不过是dot的两个输入相同。CUDA算dot应该比CPU慢，可是sqrtf()让CPU的length比它自己的dot运算慢了差不多四倍。输入a，b与a-b的量级差不多，所以差别就体现在sqrtf()上。CUDA的length就和它的dot差不多，应该是因为CUDA擅长浮点数运算，所以它的length就比CPU的快。&lt;/p&gt;

&lt;p&gt;可是刚刚的结论似乎没法解释normalize上CUDA和CPU差距不是很大的事实。normalize只是比length多了一个倒数和乘法运算。理论上应该和length差不多，实际却比length慢一半。换个角度，对比两者的dot和normalize，CUDA的这两个运算差距不是很大，normalize只比dot慢了一半。而CPU的normalize几乎用了它dot的四倍时间。其中的差异应该还是rsqrtf()的sqrtf()造成的。&lt;/p&gt;

&lt;p&gt;试了试嵌套调用normalize，第一次嵌套就比CPU快了一点。CPU/CUDA的时间比随着嵌套次数开始增加，1.04，1.07，1.18，1.13，1.17。normalize嵌套意义可能不大，因为嵌套之后每次运算过程都一样。&lt;/p&gt;

&lt;p&gt;以上结果都没有取平均值，不过还是能得出一些初步的结论。比如在牵扯到输入量巨大的浮点数运算时，CUDA才会展现出优势。&lt;/p&gt;</content><author><name></name></author><category term="CUDA" /><summary type="html">最近开始学习CUDA。正式开始写代码前查了一些资料，对CUDA的印象就是擅长浮点数运算，缺点就是如果数据量不足够大，就不一定比CPU快。自己尝试了一些简单的对比后稍微有些理解了。 电脑配置：i7-670HQ，GTX970m，16G。 测试使用三个CUDA官方例子中的三维向量计算函数： inline __host__ __device__ float3 normalize(float3 v) { float invLen = rsqrtf(dot(v, v)); return v * invLen; } inline __host__ __device__ float length(float3 v) { return sqrtf(dot(v, v)); } inline __host__ __device__ float dot(float3 a, float3 b) { return a.x * b.x + a.y * b.y + a.z * b.z; } 其中用到的其他函数是CUDA内置的sqrtf()和基于sqrtf()的rsqrtf()：平方根和平方根倒数 extern __CUDA_MATH_CRTIMP __DEVICE_FUNCTIONS_DECL__ __device_builtin__ float __cdecl sqrtf(float) __THROW; inline float rsqrtf(float x) { return 1.0f / sqrtf(x); } 输入： float3 a ：(99, 99, 99); float3 b ：(999, 999, 999); 时间单位ms。 第一次测试：使用以上三个函数计算100万次：normalize(a); length(a-b); dot(a,b).   normalize(a) length(a-b) dot(a,b) CPU用时 132 141 32 CUDA用时 None None None CUDA下直接爆内存卡死。可能是我的配置扛不住连续一百万次cudaMemcpy()。 第二次测试：换成100次。   normalize(a) length(a-b) dot(a,b) CPU用时 0 0 0 CUDA用时 109 14 16 结论：差距巨大，按照第一次测试的结果估算，这种情况下CPU比CUDA快5333倍。 第三次测试：把单独输入换成数组一次输入。以下是不同大小数组的结果。   CPU nor CUDA nor CPU len CUDA len CPU dot CUDA dot 100 0 1 0 0 0 0 1000 0 1 0 0 0 0 10000 1 2 1 2 0 1 100000 14 21 14 11 3 13 1000000 139 143 146 103 34 107 10000000 1395 1455 1460 1064 361 1056 100000000 14254 17737 14661 14809 3420 10722 这次的结果就有意思了。10000长度以下差别不是很大，10万次以上CUDA的length(a-b)明显比CPU快，但其他的还是比不过CPU。一亿次时爆了内存，程序卡了，CUDA的length(a-b)优势也因为爆内存而消失了。 这就说明了CUDA的好几个特点。首先是输入量大的时候，把大量变量一起传给CUDA运算会比单个传快得多，因为单个传只用了CUDA的一个线程。在数据运算量不大的时候，CUDA和CPU差距也不大，甚至CPU还全面赶超CUDA。当数据量足够大时，CUDA的length(a-b)比CPU快了差不多一半，但其他的还是慢。 从函数上看，比dot的话，整数运算CUDA总是比CPU慢。 length函数中也是调用了dot，只不过是dot的两个输入相同。CUDA算dot应该比CPU慢，可是sqrtf()让CPU的length比它自己的dot运算慢了差不多四倍。输入a，b与a-b的量级差不多，所以差别就体现在sqrtf()上。CUDA的length就和它的dot差不多，应该是因为CUDA擅长浮点数运算，所以它的length就比CPU的快。 可是刚刚的结论似乎没法解释normalize上CUDA和CPU差距不是很大的事实。normalize只是比length多了一个倒数和乘法运算。理论上应该和length差不多，实际却比length慢一半。换个角度，对比两者的dot和normalize，CUDA的这两个运算差距不是很大，normalize只比dot慢了一半。而CPU的normalize几乎用了它dot的四倍时间。其中的差异应该还是rsqrtf()的sqrtf()造成的。 试了试嵌套调用normalize，第一次嵌套就比CPU快了一点。CPU/CUDA的时间比随着嵌套次数开始增加，1.04，1.07，1.18，1.13，1.17。normalize嵌套意义可能不大，因为嵌套之后每次运算过程都一样。 以上结果都没有取平均值，不过还是能得出一些初步的结论。比如在牵扯到输入量巨大的浮点数运算时，CUDA才会展现出优势。</summary></entry><entry><title type="html">Vicon动作捕捉系统评测</title><link href="http://localhost:4000/blog/motionTracking/" rel="alternate" type="text/html" title="Vicon动作捕捉系统评测" /><published>2020-08-26T00:00:00+08:00</published><updated>2020-08-26T00:00:00+08:00</updated><id>http://localhost:4000/blog/motionTracking</id><content type="html" xml:base="http://localhost:4000/blog/motionTracking/">&lt;p&gt;今天有幸接触到了Vicon的一套动作捕捉系统，Vero V2.2。报价貌似三四十万，主要的硬件是八台红外动作捕捉相机，每一台都能买辆车了。参数如下。&lt;/p&gt;

&lt;p&gt;Parameters: Max HZ = 330, Max resolution = 2.2M pixels,&lt;/p&gt;

&lt;p&gt;Horizontal FOV = 98.1°, Vertical FOV = 50.1°.&lt;/p&gt;

&lt;p&gt;Min. number of cameras = 2.&lt;/p&gt;

&lt;p&gt;配了一个交换机，相机用带供电的网线和交换机连接再连到电脑上。&lt;/p&gt;

&lt;p&gt;原理看似很简单，就是把一些涂有反光材料的小球贴到被追踪物体上，相机镜头外有一圈红外LED，中间的红外相机就能看到小球反射的光。把画面发给电脑来计算位置，配置上要求独立显卡，那估计是用到显卡来运算了，也可能是配套软件要求独立显卡。听供应商的人讲，严格的暗室实验环境下精度能到0.01mm，一般使用好像只有0.xmm。&lt;/p&gt;

&lt;p&gt;这套系统的优点是高精度高帧率，和一系列配套的软件。&lt;/p&gt;

&lt;p&gt;Nexus: designed for life sciences: automated features, intelligent processing and flexible controls.&lt;/p&gt;

&lt;p&gt;Shōgun: designed for Visual effects (VFX). For media and entertainment applications.&lt;/p&gt;

&lt;p&gt;Evoke: designed for location based VR (LBVR).&lt;/p&gt;

&lt;p&gt;Tracker: designed for high precise tracking.&lt;/p&gt;

&lt;p&gt;ProCalc: visual application for creating custom kinematic models.&lt;/p&gt;

&lt;p&gt;Vicon Control: mobile app for system control and capture.&lt;/p&gt;

&lt;p&gt;Supported game engines: Unreal Engine, Unity3D and so on.&lt;/p&gt;

&lt;p&gt;Datastream SDK: for MATLAB, Labview, C++ and .Net.&lt;/p&gt;

&lt;p&gt;缺点除了垄断行业带来的虚高价格外（定位的塑料小球一个200元，某宝20），其他缺点也不少。首先是定位球多的话，因为遮挡而丢失的数据就会增加。官方的配套软件能在录制完后进行手动的数据补全，可以根据其他定位球的前后轨迹来计算被遮挡住的球的位置。&lt;/p&gt;

&lt;p&gt;定位球摆放上需要尽量摆成一个面，这样丢失点的话，容易计算。定位球有不同的大小，可以贴到嘴唇上读唇，也可以贴到身上，无人机上。软件上，主要的软件Nexus只支持windows，系统界面设计和建模软件差不多。&lt;/p&gt;

&lt;p&gt;供应商给看了很多例子，电影游戏动画，机器人，步态分析等等。看无人机例子的时候想到了网上tango的无人机定位应用，也很稳。但后来我用tango做小型无人车定位时却很容易遇到漂移，可能是因为我用的是阉割版。想起来最近有个依靠深度学习加点云避障的无人机看上去也很稳。红外定位球的动作捕捉，和这类点云SLAM的最大区别还是精度和帧率吧。红外定位球的摆放数量几乎不受限制，每台相机最远追踪距离是十米，而且可以摆放多个相机。小型化无需外置传感器的高精度定位还是有不少应用场景，比如最近几年的各种VR、MR一体机。如果这类定位技术能低成本量产，精度和帧率提上去的话，或许能取代红外动作捕捉的部分应用场景。&lt;/p&gt;

&lt;p&gt;当初采购的时候我还对比了一下Advanced Realtime Tracking的ARTTRACK5，做红外动作捕捉的还有别的公司，ART就是其中之一。不过ART的配置略逊一筹，软件支持上没有Vicon多，ART就只支持Unity，Vicon还支持虚幻。但这两个公司的定位上是有些差异的，Vicon给的应用例子大多还是电影游戏为主，说起动作捕捉，一般人可能也就只会想到电影和游戏吧。ART给了一些航空航天和汽车制造行业的例子。Vicon的工学例子大多是无人机和机器人。&lt;/p&gt;

&lt;p&gt;对于一般人来说，这套系统的最大用途可能是VR全身动作捕捉，这套系统的定位延迟据称是比一般的VR低。但成本还是太高了，Kinect也能做动作捕捉，价格可能只相当于Vicon的几个定位球。Kinect也能串联避免盲区，可是Kinect的大部分应用可能都没有支持串联。这套系统对于一般人来说最大的用途应该只是更精准的VR全身动作捕捉，高质量Vtuber。&lt;/p&gt;

&lt;p&gt;面部表情和身体动作捕捉也有不少廉价的替代方案，把tango玩死后苹果又开始进军深度相机，unity官方就有一个用iphone前置深度相机录制面部表情动画的例子，除了精度和帧率比不如红外动捕外，剩下的就几乎都是优点。深度相机和一般相机的身体动作捕捉方案也有不少。但还是在精度和帧率上打不过红外动捕，这也正是红外动捕用户的最大需求。&lt;/p&gt;</content><author><name></name></author><category term="动作捕捉" /><summary type="html">今天有幸接触到了Vicon的一套动作捕捉系统，Vero V2.2。报价貌似三四十万，主要的硬件是八台红外动作捕捉相机，每一台都能买辆车了。参数如下。 Parameters: Max HZ = 330, Max resolution = 2.2M pixels, Horizontal FOV = 98.1°, Vertical FOV = 50.1°. Min. number of cameras = 2. 配了一个交换机，相机用带供电的网线和交换机连接再连到电脑上。 原理看似很简单，就是把一些涂有反光材料的小球贴到被追踪物体上，相机镜头外有一圈红外LED，中间的红外相机就能看到小球反射的光。把画面发给电脑来计算位置，配置上要求独立显卡，那估计是用到显卡来运算了，也可能是配套软件要求独立显卡。听供应商的人讲，严格的暗室实验环境下精度能到0.01mm，一般使用好像只有0.xmm。 这套系统的优点是高精度高帧率，和一系列配套的软件。 Nexus: designed for life sciences: automated features, intelligent processing and flexible controls. Shōgun: designed for Visual effects (VFX). For media and entertainment applications. Evoke: designed for location based VR (LBVR). Tracker: designed for high precise tracking. ProCalc: visual application for creating custom kinematic models. Vicon Control: mobile app for system control and capture. Supported game engines: Unreal Engine, Unity3D and so on. Datastream SDK: for MATLAB, Labview, C++ and .Net. 缺点除了垄断行业带来的虚高价格外（定位的塑料小球一个200元，某宝20），其他缺点也不少。首先是定位球多的话，因为遮挡而丢失的数据就会增加。官方的配套软件能在录制完后进行手动的数据补全，可以根据其他定位球的前后轨迹来计算被遮挡住的球的位置。 定位球摆放上需要尽量摆成一个面，这样丢失点的话，容易计算。定位球有不同的大小，可以贴到嘴唇上读唇，也可以贴到身上，无人机上。软件上，主要的软件Nexus只支持windows，系统界面设计和建模软件差不多。 供应商给看了很多例子，电影游戏动画，机器人，步态分析等等。看无人机例子的时候想到了网上tango的无人机定位应用，也很稳。但后来我用tango做小型无人车定位时却很容易遇到漂移，可能是因为我用的是阉割版。想起来最近有个依靠深度学习加点云避障的无人机看上去也很稳。红外定位球的动作捕捉，和这类点云SLAM的最大区别还是精度和帧率吧。红外定位球的摆放数量几乎不受限制，每台相机最远追踪距离是十米，而且可以摆放多个相机。小型化无需外置传感器的高精度定位还是有不少应用场景，比如最近几年的各种VR、MR一体机。如果这类定位技术能低成本量产，精度和帧率提上去的话，或许能取代红外动作捕捉的部分应用场景。 当初采购的时候我还对比了一下Advanced Realtime Tracking的ARTTRACK5，做红外动作捕捉的还有别的公司，ART就是其中之一。不过ART的配置略逊一筹，软件支持上没有Vicon多，ART就只支持Unity，Vicon还支持虚幻。但这两个公司的定位上是有些差异的，Vicon给的应用例子大多还是电影游戏为主，说起动作捕捉，一般人可能也就只会想到电影和游戏吧。ART给了一些航空航天和汽车制造行业的例子。Vicon的工学例子大多是无人机和机器人。 对于一般人来说，这套系统的最大用途可能是VR全身动作捕捉，这套系统的定位延迟据称是比一般的VR低。但成本还是太高了，Kinect也能做动作捕捉，价格可能只相当于Vicon的几个定位球。Kinect也能串联避免盲区，可是Kinect的大部分应用可能都没有支持串联。这套系统对于一般人来说最大的用途应该只是更精准的VR全身动作捕捉，高质量Vtuber。 面部表情和身体动作捕捉也有不少廉价的替代方案，把tango玩死后苹果又开始进军深度相机，unity官方就有一个用iphone前置深度相机录制面部表情动画的例子，除了精度和帧率比不如红外动捕外，剩下的就几乎都是优点。深度相机和一般相机的身体动作捕捉方案也有不少。但还是在精度和帧率上打不过红外动捕，这也正是红外动捕用户的最大需求。</summary></entry><entry><title type="html">淡路岛攻略</title><link href="http://localhost:4000/blog/awajishima/" rel="alternate" type="text/html" title="淡路岛攻略" /><published>2020-08-20T00:00:00+08:00</published><updated>2020-08-20T00:00:00+08:00</updated><id>http://localhost:4000/blog/awajishima</id><content type="html" xml:base="http://localhost:4000/blog/awajishima/">&lt;p&gt;当时旅行结束先发在了贴吧里，后来才整理到博客里。&lt;/p&gt;

&lt;h1 id=&quot;证&quot;&gt;证&lt;/h1&gt;

&lt;p&gt;首先是签证，如果是本科、研究生在读或毕业三年以内，就可以免财产证明申请签证。
这个是第一个条件，不然的话好像要有十万财产证明。具体可以问某宝，他们更清楚，而且签证可以某宝办，大概几百块。
签证有效期是90天，出发的那一天一定要在90天内，我一开始不知道，差一天签证就过期了。这个在买机票的时候要注意一下，然后单次签证能在日本停留15天。&lt;/p&gt;

&lt;h1 id=&quot;飞&quot;&gt;飞&lt;/h1&gt;

&lt;p&gt;先说机票吧，我买的乐桃，和同学两个人一款去，往返两个人总共3800。关于乐桃的问题，网上说好像是容易取消，反正我这次没遇到问题。
乐桃的机票分三个档位，如果不拉旅行箱，只背一个包，可以买最便宜的simple peach。
便宜机票的问题是如果取消航班不会给你退款，但便宜这一点就足够了。在其他平台上买不到乐桃的最低档，一定要去乐桃官网订。官网需要国际信用卡，没有的话，某宝上应该有代付的服务，可以查查。&lt;/p&gt;

&lt;h1 id=&quot;住&quot;&gt;住&lt;/h1&gt;

&lt;p&gt;住的话，我是在booking上订的，国内其他平台的选择太少了。
booking方便，酒店多，也能用支付宝。
我的行程路线是上海出发到大阪关西机场。
如果不嫌每天大阪淡路岛往返200多rmb的交通费贵，可以都住大阪，大阪的酒店有特别便宜的 不到100的青旅，当然也有很贵的。
淡路岛上酒店基本上都不便宜，而且同价位也远没有大阪酒店好。
我是在淡路岛上的洲本住了两晚，因为洲本距离滩黑岩最近，只有26公里。&lt;/p&gt;

&lt;h1 id=&quot;行&quot;&gt;行&lt;/h1&gt;

&lt;p&gt;如果按照我的路线，我从大阪到淡路岛要先坐jr到神户三之宫，然后坐大巴去。三之宫大巴到淡路岛洲本巴士中心，单程1890日元，不懂日语的话，买之前最好问问工作人员。我第一次就买错了，洲本巴士中心可以坐水仙巴士去滩黑岩。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/bus1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这就是水仙巴士，其实就是面包车，可能是坐的人少，就改成了面包车。
司机七十多岁，还会一些英语，在日本旅游会一点英语就没问题。或者下个日语输入法和谷歌翻译，让对方打日语，再翻译成中文。这个是网友讲的方法，很天才。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/bus2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/bus3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我当天是九点从洲本的海月酒店出门,到洲本巴士中心坐这个面包车。10点15到滩黑岩，司机一开始圈错了，又拿了一张重新圈了一下。
蓝色是去，红色是回来。13点54坐同一辆车回来。往返2000日元。
谷歌地图的路线推荐也没这个水仙巴士。出门可以以换乘案内为主，谷歌地图为辅。
在日本的话，gps好像不太准，这个可能是我买的上网卡有问题。日本的4g信号也很不稳，在洲本住海月酒店的时候，晚上连4g或者wifi都没速度，一过零点就恢复了，我是买的上网卡，可能租借wifi会好一些。&lt;/p&gt;

&lt;p&gt;以上就是我的路线，上海到大阪，早上九点到关西机场，第一天可以熟悉一下环境，第二天早上从淡路岛内出发，就能去滩黑岩。水仙乡是9点到4点半可以进，下雨的话，是真的开始下雨了才会关门。不过这个水仙巴士还会在雨天开放，下雨天就算进不去也可以在外面看看，因为水仙乡其实很小，在公路上就能看到靠海的那一面。进到里面的话，可以从山坡上往下看，景色更好。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/park.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今年没有关西机场到淡路岛的船了。理论上，如果早上九点到关西机场，完全可以在下午四点半之前到滩黑岩，然后回来坐十点回国的飞机。
这是极限路线，我没试过，理论上可以，但还是建议去三天，因为要避开下雨天。&lt;/p&gt;

&lt;h1 id=&quot;骑&quot;&gt;骑&lt;/h1&gt;

&lt;p&gt;再来讲讲骑行路线，网上查&lt;a href=&quot;https://www.awajishima-kanko.jp/&quot;&gt;淡路岛官网&lt;/a&gt;，语言切换到日语，就有租自行车的详细信息了，很便宜，但租的是买菜车。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/bike1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/bike2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这车三挡变速，变的好像还只是脚踏之间的齿轮，而不是后轮上的，不过骑起来还是比一般自行车强一点。
淡路岛有一个144km的环岛骑行路线。我住的地方离滩黑岩26km，我以为可以骑车去，所以第一天就去租车。在洲本巴士中心租的，其他地方也可以租。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/beach1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/beach2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里是起点，洲本巴士中心附近的海滩。风景还行，海边真的是松树林。水仙中描述的沿途场景大多都是真实存在的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/lost.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;租了三天，只有第一天骑得多。但是有一个很严重的问题，虽然只有26km，中间却有大概七八km的盘山公路。平路可以骑20km/h，盘山公路这种买菜车只能推着。当时一个小时时间推了不到两千米，也没手机信号了，浑身是汗。淡路岛很大，滩黑岩附近都是深山。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/bikeMap.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是游客中心给的地图，有一个工作人员英语特别好，交流完全没问题。
图上标caution的那段夹在两端平路之间的山路有超过一半都是上坡，我就是在这里放弃了。
第二天坐水仙巴士去的水仙乡，路上还看到猴子中心跑出来的猴子。 第一天骑车回去路上还看到两只野猪卡在下水道里出不来了，当时太累，就没拍野猪。猴子拍了一下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/monkey.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;路上基本上都是野山，路边插着乱扔垃圾最高罚款1000万日元和判五年徒刑的牌子，但路边每一米都有垃圾。这点和洲本市还有大阪市的街道就不一样了，其他地方确实是很干净。
这段26km的路虽然没骑完，但也确实有意思，有空的话，可以早上出发试试。不过那天天气5到十几度，还能骑一身汗，天更冷的话就不推荐去了。
没有专业车辆或者身体素质的话，就算天好也不要轻易尝试，推车走七八公里的盘山路可能还没有走路走完全程快。&lt;/p&gt;

&lt;h1 id=&quot;杂&quot;&gt;杂&lt;/h1&gt;

&lt;p&gt;岛内交通可能就是各种面包车，不能刷交通卡只能现金，淡路岛和一个县差不多大，地广人稀。可以百度淡路岛官网，切换到日文，里面有很详细的冬日旅游介绍，和车站放的旅游手册一模一样，冬天能去的地方也不少。&lt;/p&gt;

&lt;p&gt;市内或者城际交通的话，icoca卡就很方便，但去淡路岛的大巴要买票，去的时候上车不查票，下车时查，回来的时候上下车都查票，有点奇怪。
icoca退卡好像只能在关西机场办理，这个要注意一下。
各种便利店都能用支付宝微信，有时候机器会坏，就没办法了，我遇到过一次。
去过一次一般超市，不能用支付宝微信，吃饭的话，游客少的店基本都只能用现金。
现金还是要准备的，在饭店吃饭或者坐大巴都需要用。
出发前最好准备好icoca卡和现金，虽然到机场也能办卡换现金，但还是在国内方便，不额外耽误时间。
上网两种选择，上网卡和租借wifi，上网卡可能是运营商的原因，很不稳定。 有时候网速只有0.0几mbps，租借wifi不清楚，可以试试。&lt;/p&gt;

&lt;p&gt;这个是滩黑岩水仙乡的&lt;a href=&quot;http://www.city.minamiawaji.hyogo.jp.t.ct.hp.transer.com/site/suisenkyou/&quot;&gt;官网&lt;/a&gt;，具体的最新开花情况可以参考这个。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/Akashi.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;攻略大概就是这样了，可惜因为骑车累了一天和天气原因，没去看明石海峡大桥，不过在大巴上拍了照。&lt;/p&gt;

&lt;p&gt;其实应该二月份去，如果可以的话，我准备明年二月再去一次，在岛上待三到五天。
二月份如果下雪的话，可能也就没有下雨天关门的问题了，就是不知道会不会有积雪盖住水仙花。想了解更多相关事项，我建了一个淡路岛旅行交流群，929025991，入群问题很简单。&lt;/p&gt;

&lt;h1 id=&quot;景&quot;&gt;景&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;../images/Narcissus1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/Narcissus2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/Narcissus3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/Narcissus4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/cover.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上是2020年1月14日拍摄的照片，这是一些拍的比较好的，去的那天下午有雨，天阴，光线不好，手机拍照也不行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/other1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今年还能盖章 就在入口处的游客咨询窗口上 站在照片所示位置往右看就是。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/other2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/other3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/other4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;去的时候带着英语版的Narcissu小说，盖了好多章，最小的圆形章盖错了，忘了取下盖子。&lt;/p&gt;

&lt;p&gt;回去后我就用第五张照片换掉了电脑壁纸，明年二月再来一次，等晴天带着相机来拍，一月份花不多，靠海的那面基本没开花，而且这天下午有雨，上午天阴，光线不好。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/other5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;淡路岛的环海公路都很窄，有的地方是单车道，双车道的地方，过自行车的空间也很小，没有专用的自行车道。
第一天骑车我是沿着白线骑，汽车开过来不会按喇叭，会开到另外一条车道上避开车手和行人。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/other6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;想骑行的可以参考一下，就是这种路，双行道路两边更窄。
离开洲本市后路边偶尔会有这种房子，山里还有更偏僻的村子。
这个小屋的照片，让我想起了官方轻小说和漫画版里的情节，有一段就是下雨，他们在路边老奶奶家里住了一晚。
一看到这个房子，我就想到这个情节，尽管我更喜欢水仙1原作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/other7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到路边这个破旧的长椅，我又想到了雨之边缘。
淡路岛确实是一个远离喧嚣城市的地方，值得一去。
希望明年能更完整的探索一下，滩黑岩水仙乡附近的立川水仙乡因为不靠海，面积也小，去的人就不多。
因为当时很累就没去，明年去看看。&lt;/p&gt;

&lt;p&gt;回来后到八月下旬才录入完了以前手写翻译的Narcissu英译小说的中文版。一开始是因为不满于官方小说和漫画对水仙1剧情的改变才开始翻译。美国网友的这个英译小说版可能是水仙1最早的外语版本，过了十多年我才又翻译成中文版。感兴趣的话可以看看我的其他博客，里面有下载链接。&lt;/p&gt;

&lt;h1 id=&quot;更新内容&quot;&gt;更新内容&lt;/h1&gt;

&lt;h3 id=&quot;2020-08-20-v10&quot;&gt;2020-08-20 V1.0&lt;/h3&gt;

&lt;p&gt;初次发布&lt;/p&gt;</content><author><name></name></author><category term="淡路岛" /><summary type="html">当时旅行结束先发在了贴吧里，后来才整理到博客里。 证 首先是签证，如果是本科、研究生在读或毕业三年以内，就可以免财产证明申请签证。 这个是第一个条件，不然的话好像要有十万财产证明。具体可以问某宝，他们更清楚，而且签证可以某宝办，大概几百块。 签证有效期是90天，出发的那一天一定要在90天内，我一开始不知道，差一天签证就过期了。这个在买机票的时候要注意一下，然后单次签证能在日本停留15天。 飞 先说机票吧，我买的乐桃，和同学两个人一款去，往返两个人总共3800。关于乐桃的问题，网上说好像是容易取消，反正我这次没遇到问题。 乐桃的机票分三个档位，如果不拉旅行箱，只背一个包，可以买最便宜的simple peach。 便宜机票的问题是如果取消航班不会给你退款，但便宜这一点就足够了。在其他平台上买不到乐桃的最低档，一定要去乐桃官网订。官网需要国际信用卡，没有的话，某宝上应该有代付的服务，可以查查。 住 住的话，我是在booking上订的，国内其他平台的选择太少了。 booking方便，酒店多，也能用支付宝。 我的行程路线是上海出发到大阪关西机场。 如果不嫌每天大阪淡路岛往返200多rmb的交通费贵，可以都住大阪，大阪的酒店有特别便宜的 不到100的青旅，当然也有很贵的。 淡路岛上酒店基本上都不便宜，而且同价位也远没有大阪酒店好。 我是在淡路岛上的洲本住了两晚，因为洲本距离滩黑岩最近，只有26公里。 行 如果按照我的路线，我从大阪到淡路岛要先坐jr到神户三之宫，然后坐大巴去。三之宫大巴到淡路岛洲本巴士中心，单程1890日元，不懂日语的话，买之前最好问问工作人员。我第一次就买错了，洲本巴士中心可以坐水仙巴士去滩黑岩。 这就是水仙巴士，其实就是面包车，可能是坐的人少，就改成了面包车。 司机七十多岁，还会一些英语，在日本旅游会一点英语就没问题。或者下个日语输入法和谷歌翻译，让对方打日语，再翻译成中文。这个是网友讲的方法，很天才。 我当天是九点从洲本的海月酒店出门,到洲本巴士中心坐这个面包车。10点15到滩黑岩，司机一开始圈错了，又拿了一张重新圈了一下。 蓝色是去，红色是回来。13点54坐同一辆车回来。往返2000日元。 谷歌地图的路线推荐也没这个水仙巴士。出门可以以换乘案内为主，谷歌地图为辅。 在日本的话，gps好像不太准，这个可能是我买的上网卡有问题。日本的4g信号也很不稳，在洲本住海月酒店的时候，晚上连4g或者wifi都没速度，一过零点就恢复了，我是买的上网卡，可能租借wifi会好一些。 以上就是我的路线，上海到大阪，早上九点到关西机场，第一天可以熟悉一下环境，第二天早上从淡路岛内出发，就能去滩黑岩。水仙乡是9点到4点半可以进，下雨的话，是真的开始下雨了才会关门。不过这个水仙巴士还会在雨天开放，下雨天就算进不去也可以在外面看看，因为水仙乡其实很小，在公路上就能看到靠海的那一面。进到里面的话，可以从山坡上往下看，景色更好。 今年没有关西机场到淡路岛的船了。理论上，如果早上九点到关西机场，完全可以在下午四点半之前到滩黑岩，然后回来坐十点回国的飞机。 这是极限路线，我没试过，理论上可以，但还是建议去三天，因为要避开下雨天。 骑 再来讲讲骑行路线，网上查淡路岛官网，语言切换到日语，就有租自行车的详细信息了，很便宜，但租的是买菜车。 这车三挡变速，变的好像还只是脚踏之间的齿轮，而不是后轮上的，不过骑起来还是比一般自行车强一点。 淡路岛有一个144km的环岛骑行路线。我住的地方离滩黑岩26km，我以为可以骑车去，所以第一天就去租车。在洲本巴士中心租的，其他地方也可以租。 这里是起点，洲本巴士中心附近的海滩。风景还行，海边真的是松树林。水仙中描述的沿途场景大多都是真实存在的。 租了三天，只有第一天骑得多。但是有一个很严重的问题，虽然只有26km，中间却有大概七八km的盘山公路。平路可以骑20km/h，盘山公路这种买菜车只能推着。当时一个小时时间推了不到两千米，也没手机信号了，浑身是汗。淡路岛很大，滩黑岩附近都是深山。 这是游客中心给的地图，有一个工作人员英语特别好，交流完全没问题。 图上标caution的那段夹在两端平路之间的山路有超过一半都是上坡，我就是在这里放弃了。 第二天坐水仙巴士去的水仙乡，路上还看到猴子中心跑出来的猴子。 第一天骑车回去路上还看到两只野猪卡在下水道里出不来了，当时太累，就没拍野猪。猴子拍了一下。 路上基本上都是野山，路边插着乱扔垃圾最高罚款1000万日元和判五年徒刑的牌子，但路边每一米都有垃圾。这点和洲本市还有大阪市的街道就不一样了，其他地方确实是很干净。 这段26km的路虽然没骑完，但也确实有意思，有空的话，可以早上出发试试。不过那天天气5到十几度，还能骑一身汗，天更冷的话就不推荐去了。 没有专业车辆或者身体素质的话，就算天好也不要轻易尝试，推车走七八公里的盘山路可能还没有走路走完全程快。 杂 岛内交通可能就是各种面包车，不能刷交通卡只能现金，淡路岛和一个县差不多大，地广人稀。可以百度淡路岛官网，切换到日文，里面有很详细的冬日旅游介绍，和车站放的旅游手册一模一样，冬天能去的地方也不少。 市内或者城际交通的话，icoca卡就很方便，但去淡路岛的大巴要买票，去的时候上车不查票，下车时查，回来的时候上下车都查票，有点奇怪。 icoca退卡好像只能在关西机场办理，这个要注意一下。 各种便利店都能用支付宝微信，有时候机器会坏，就没办法了，我遇到过一次。 去过一次一般超市，不能用支付宝微信，吃饭的话，游客少的店基本都只能用现金。 现金还是要准备的，在饭店吃饭或者坐大巴都需要用。 出发前最好准备好icoca卡和现金，虽然到机场也能办卡换现金，但还是在国内方便，不额外耽误时间。 上网两种选择，上网卡和租借wifi，上网卡可能是运营商的原因，很不稳定。 有时候网速只有0.0几mbps，租借wifi不清楚，可以试试。 这个是滩黑岩水仙乡的官网，具体的最新开花情况可以参考这个。 攻略大概就是这样了，可惜因为骑车累了一天和天气原因，没去看明石海峡大桥，不过在大巴上拍了照。 其实应该二月份去，如果可以的话，我准备明年二月再去一次，在岛上待三到五天。 二月份如果下雪的话，可能也就没有下雨天关门的问题了，就是不知道会不会有积雪盖住水仙花。想了解更多相关事项，我建了一个淡路岛旅行交流群，929025991，入群问题很简单。 景 以上是2020年1月14日拍摄的照片，这是一些拍的比较好的，去的那天下午有雨，天阴，光线不好，手机拍照也不行。 今年还能盖章 就在入口处的游客咨询窗口上 站在照片所示位置往右看就是。 去的时候带着英语版的Narcissu小说，盖了好多章，最小的圆形章盖错了，忘了取下盖子。 回去后我就用第五张照片换掉了电脑壁纸，明年二月再来一次，等晴天带着相机来拍，一月份花不多，靠海的那面基本没开花，而且这天下午有雨，上午天阴，光线不好。 淡路岛的环海公路都很窄，有的地方是单车道，双车道的地方，过自行车的空间也很小，没有专用的自行车道。 第一天骑车我是沿着白线骑，汽车开过来不会按喇叭，会开到另外一条车道上避开车手和行人。 想骑行的可以参考一下，就是这种路，双行道路两边更窄。 离开洲本市后路边偶尔会有这种房子，山里还有更偏僻的村子。 这个小屋的照片，让我想起了官方轻小说和漫画版里的情节，有一段就是下雨，他们在路边老奶奶家里住了一晚。 一看到这个房子，我就想到这个情节，尽管我更喜欢水仙1原作。 看到路边这个破旧的长椅，我又想到了雨之边缘。 淡路岛确实是一个远离喧嚣城市的地方，值得一去。 希望明年能更完整的探索一下，滩黑岩水仙乡附近的立川水仙乡因为不靠海，面积也小，去的人就不多。 因为当时很累就没去，明年去看看。 回来后到八月下旬才录入完了以前手写翻译的Narcissu英译小说的中文版。一开始是因为不满于官方小说和漫画对水仙1剧情的改变才开始翻译。美国网友的这个英译小说版可能是水仙1最早的外语版本，过了十多年我才又翻译成中文版。感兴趣的话可以看看我的其他博客，里面有下载链接。 更新内容 2020-08-20 V1.0 初次发布</summary></entry><entry><title type="html">Narcissu英文小说汉译版</title><link href="http://localhost:4000/blog/narcissu/" rel="alternate" type="text/html" title="Narcissu英文小说汉译版" /><published>2020-08-20T00:00:00+08:00</published><updated>2020-08-20T00:00:00+08:00</updated><id>http://localhost:4000/blog/narcissu</id><content type="html" xml:base="http://localhost:4000/blog/narcissu/">&lt;p&gt;&lt;img src=&quot;../images/cover.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;汉译版下载链接:&lt;a href=&quot;../Narcissu_V1.pdf&quot;&gt;Narcissu V1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原英译小说版下载网址：http://www.neechin.net/downloads/ Narcissu-v2.pdf&lt;/p&gt;

&lt;p&gt;译者前言：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;汉译者：&lt;/strong&gt;Chaosikaros&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;邮箱：&lt;/strong&gt;chaosikaros@outlook.com&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;版权声明：&lt;/strong&gt;参考原英译者，我也不怎么关心。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;翻译前言：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Narcissu, 是最知名的视觉小说，在发布十年后的今天，以及有了十二种语言版本。这些全部由爱好者们自发翻译。当然也有简体中文版，不过这部小说化的Narcissu应该还没有人翻译成中文。虽然官方有正式的小说版，但我读了之后倍感失望。因为官方小说揉和了两代剧情，与原作相距甚远。所以我很想读一读真正的小说版。Randy Au的这个版本正合我意。所以就用了两个月时间把它翻译成中文了。我不是专业翻译，但已经尽全力去翻译了。&lt;/p&gt;

&lt;p&gt;如果你喜欢的话，可以去玩一下原作。&lt;/p&gt;

&lt;p&gt;关于这个故事本身，我觉得这术语片冈的轻悲剧作品。我略微接触过片冈的作品，发现很多相似之处。片冈的悲剧作品有不少人都喜欢，我也是其中之一。作为最成功的视觉小说，它所讲述的故事别具一格。但其实该作的绝大部分悲剧气氛是来源于背景音乐的渲染，它用了不少猫猫社早期悲剧作品中的背景音乐。所以片冈本人也没有想到它会被归为催泪作。只看剧本的话，我觉得用“宁静”来形容最为恰当。它讲述的故事平淡而又深入人心。&lt;/p&gt;

&lt;p&gt;By Chaosikaros 2015.11.12&lt;/p&gt;

&lt;p&gt;第一次润色与校对：Chaosikaros&lt;/p&gt;

&lt;p&gt;2016.02.14到2016.04.05&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;录入前言：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这份翻译稿原本是打印出来手写翻译的。后来我也翻译了Drama CD和Narcissu 2的英语剧本，最后翻译银色的英语小说版时终止了所有翻译活动，再也没有继续翻译小说。早在16年我就想把这份手稿录成文档。但直到2019年10月我才开始实践这个想法。我记得一开始只是看了一遍，大概是2015年4月看完了。后来才萌生了翻译的想法，因为我太爱这个故事了。游戏原作的话是2012年接触的。&lt;/p&gt;

&lt;p&gt;一开始我只是普通的爱好者，在翻译小说版的几年间尝试做过文字游戏。后来专注于游戏领域，正式做了不少其他类型的游戏。但无论什么游戏，什么故事，都比不上Narcissu在我心目中的地位。16年在我人生最失意的时候我翻看着自己的手稿，无意间发现Narcissu 2提到的《佛兰德斯的狗》并不是虚构作品，找到了一丝希望，便去读了原著小说。之后自己种了一盆水仙花，每天都拍照写观察日记，花开的时候单独给每一朵花拍照。在我最失意的时候，Narcissu帮助我走了出来。15年开始翻译时，我就在卧室门把手上贴了张纸，上面写着故事角色旅途的终点——“Awajishima”（淡路岛）。今年终于有机会去淡路岛了。在淡路岛之行的前几个月，我开始下定决心录入Narcissu 小说版手稿。&lt;/p&gt;

&lt;p&gt;16年至今的生活中，Narcissu相关的一切成了我生活中少有的美好存在。我个人是没有宗教信仰，也没有看过任何宗教书籍。Narcissu的故事带给我的影响不亚于任何宗教。在苦难生活中坚持对美好事物的追求，这种心理和宗教信仰应该有相似之处。写到这里，想起了Narcissu 2对天主教的描写，Narcissu带给我的影响可能就相当于圣经于天主教教徒。这或许就是信仰的力量。我的信仰就是这个美丽的故事。或许说好的故事可以化身为信仰持续影响读者。&lt;/p&gt;

&lt;p&gt;我也曾经喜欢创作，如今却失去了创作的激情，我变了许多，除了对Narcissu的无限热爱外一切都变了。我一直希望能用自己的一切所学表达自己的故事。但16年后，我放弃了创作。希望将来某一天自己也能沉静下来，再次创作自己的故事。&lt;/p&gt;

&lt;p&gt;我不是什么专业的翻译家，只是喜爱这个故事。因为当时手写翻译时只参考了牛津和现汉词典，所以翻译中可能会有很多错误和不通顺的地方，在录入以及二次校对时我会再次润色。同时为了语句通顺，会把初次翻译时完全照搬英语原意的直译语句重新意译。原文出错的地方我会改正，缺失的地方也会补上。我会去掉有些不必要的注释，在合适的地方加上合适的注释。这个小说版只有大概三万九千字，虽然不长，但我反复修改校对了很多遍。&lt;/p&gt;

&lt;p&gt;最后希望能有更多人通过小说版了解到这个美丽的故事。&lt;/p&gt;

&lt;p&gt;By Chaosikaros&lt;/p&gt;

&lt;p&gt;2019.10.31&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;录入结束：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;录入一半的时候，2020年1月下旬去了一次淡路岛。淡路岛游记我单独放到了博客上，希望能帮到想去淡路岛的朋友。&lt;a href=&quot;https://chaosikaros.github.io/blog/awajishima/&quot;&gt;淡路岛游记&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;半年后的八月份才继续录入剩下的部分。因为去过一次，所以在路线名称的翻译上就比以前强多了。遵循谷歌地图和网上的路线图资料更正了一下英语小说版的部分地名。因为怕风格混淆就没有再对照汉化的游戏版。所以地名上或许还有些问题。&lt;/p&gt;

&lt;p&gt;Narcissu提到的大部分地名都不是虚构的。琵琶湖，明石海峡大桥，淡路岛，滩黑岩水仙乡，都是真的。淡路岛还有一个立川水仙乡，但不靠海。有机会都可以去看看。水仙花是一月到二月开，大概春节前后去最合适。我是一月去的，花不多，封面就是当时拍的照片中最好看的一张，回来后就当成电脑壁纸用了。以后有机会二月去一次，带个好点的相机拍。&lt;/p&gt;

&lt;p&gt;终于录入结束了，本应该在2016年做完的事一直拖了四年。这或许是我最后一次沉浸在文字作品中。希望将来还有时间继续自己的创作生涯。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;录入以及二次校对&lt;/strong&gt;：Chaosikaros&lt;/p&gt;

&lt;p&gt;2019.10.31到 2020.08.20&lt;/p&gt;

&lt;h2 id=&quot;更新内容&quot;&gt;更新内容&lt;/h2&gt;

&lt;h3 id=&quot;2020-08-20-v10&quot;&gt;2020-08-20 V1.0&lt;/h3&gt;

&lt;p&gt;初次发布&lt;/p&gt;</content><author><name></name></author><category term="Narcissu" /><summary type="html">汉译版下载链接:Narcissu V1 原英译小说版下载网址：http://www.neechin.net/downloads/ Narcissu-v2.pdf 译者前言： 汉译者：Chaosikaros 邮箱：chaosikaros@outlook.com 版权声明：参考原英译者，我也不怎么关心。 翻译前言： Narcissu, 是最知名的视觉小说，在发布十年后的今天，以及有了十二种语言版本。这些全部由爱好者们自发翻译。当然也有简体中文版，不过这部小说化的Narcissu应该还没有人翻译成中文。虽然官方有正式的小说版，但我读了之后倍感失望。因为官方小说揉和了两代剧情，与原作相距甚远。所以我很想读一读真正的小说版。Randy Au的这个版本正合我意。所以就用了两个月时间把它翻译成中文了。我不是专业翻译，但已经尽全力去翻译了。 如果你喜欢的话，可以去玩一下原作。 关于这个故事本身，我觉得这术语片冈的轻悲剧作品。我略微接触过片冈的作品，发现很多相似之处。片冈的悲剧作品有不少人都喜欢，我也是其中之一。作为最成功的视觉小说，它所讲述的故事别具一格。但其实该作的绝大部分悲剧气氛是来源于背景音乐的渲染，它用了不少猫猫社早期悲剧作品中的背景音乐。所以片冈本人也没有想到它会被归为催泪作。只看剧本的话，我觉得用“宁静”来形容最为恰当。它讲述的故事平淡而又深入人心。 By Chaosikaros 2015.11.12 第一次润色与校对：Chaosikaros 2016.02.14到2016.04.05 录入前言： 这份翻译稿原本是打印出来手写翻译的。后来我也翻译了Drama CD和Narcissu 2的英语剧本，最后翻译银色的英语小说版时终止了所有翻译活动，再也没有继续翻译小说。早在16年我就想把这份手稿录成文档。但直到2019年10月我才开始实践这个想法。我记得一开始只是看了一遍，大概是2015年4月看完了。后来才萌生了翻译的想法，因为我太爱这个故事了。游戏原作的话是2012年接触的。 一开始我只是普通的爱好者，在翻译小说版的几年间尝试做过文字游戏。后来专注于游戏领域，正式做了不少其他类型的游戏。但无论什么游戏，什么故事，都比不上Narcissu在我心目中的地位。16年在我人生最失意的时候我翻看着自己的手稿，无意间发现Narcissu 2提到的《佛兰德斯的狗》并不是虚构作品，找到了一丝希望，便去读了原著小说。之后自己种了一盆水仙花，每天都拍照写观察日记，花开的时候单独给每一朵花拍照。在我最失意的时候，Narcissu帮助我走了出来。15年开始翻译时，我就在卧室门把手上贴了张纸，上面写着故事角色旅途的终点——“Awajishima”（淡路岛）。今年终于有机会去淡路岛了。在淡路岛之行的前几个月，我开始下定决心录入Narcissu 小说版手稿。 16年至今的生活中，Narcissu相关的一切成了我生活中少有的美好存在。我个人是没有宗教信仰，也没有看过任何宗教书籍。Narcissu的故事带给我的影响不亚于任何宗教。在苦难生活中坚持对美好事物的追求，这种心理和宗教信仰应该有相似之处。写到这里，想起了Narcissu 2对天主教的描写，Narcissu带给我的影响可能就相当于圣经于天主教教徒。这或许就是信仰的力量。我的信仰就是这个美丽的故事。或许说好的故事可以化身为信仰持续影响读者。 我也曾经喜欢创作，如今却失去了创作的激情，我变了许多，除了对Narcissu的无限热爱外一切都变了。我一直希望能用自己的一切所学表达自己的故事。但16年后，我放弃了创作。希望将来某一天自己也能沉静下来，再次创作自己的故事。 我不是什么专业的翻译家，只是喜爱这个故事。因为当时手写翻译时只参考了牛津和现汉词典，所以翻译中可能会有很多错误和不通顺的地方，在录入以及二次校对时我会再次润色。同时为了语句通顺，会把初次翻译时完全照搬英语原意的直译语句重新意译。原文出错的地方我会改正，缺失的地方也会补上。我会去掉有些不必要的注释，在合适的地方加上合适的注释。这个小说版只有大概三万九千字，虽然不长，但我反复修改校对了很多遍。 最后希望能有更多人通过小说版了解到这个美丽的故事。 By Chaosikaros 2019.10.31 录入结束： 录入一半的时候，2020年1月下旬去了一次淡路岛。淡路岛游记我单独放到了博客上，希望能帮到想去淡路岛的朋友。淡路岛游记 半年后的八月份才继续录入剩下的部分。因为去过一次，所以在路线名称的翻译上就比以前强多了。遵循谷歌地图和网上的路线图资料更正了一下英语小说版的部分地名。因为怕风格混淆就没有再对照汉化的游戏版。所以地名上或许还有些问题。 Narcissu提到的大部分地名都不是虚构的。琵琶湖，明石海峡大桥，淡路岛，滩黑岩水仙乡，都是真的。淡路岛还有一个立川水仙乡，但不靠海。有机会都可以去看看。水仙花是一月到二月开，大概春节前后去最合适。我是一月去的，花不多，封面就是当时拍的照片中最好看的一张，回来后就当成电脑壁纸用了。以后有机会二月去一次，带个好点的相机拍。 终于录入结束了，本应该在2016年做完的事一直拖了四年。这或许是我最后一次沉浸在文字作品中。希望将来还有时间继续自己的创作生涯。 录入以及二次校对：Chaosikaros 2019.10.31到 2020.08.20 更新内容 2020-08-20 V1.0 初次发布</summary></entry></feed>